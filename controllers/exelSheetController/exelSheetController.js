const responseService = require('../../services/exelSheetServices/exelSheetService');
const { format } = require('@fast-csv/format');

exports.exportResponsesToCSV = async (req, res) => {
  const meetingId = req.params.meetingId;

  try {
    const responses = await responseService.getResponsesByMeeting(meetingId);

    // ØªØ¬Ù…ÙŠØ¹ Ø§Ù„Ø±Ø¯ÙˆØ¯ Ø¨Ø­Ø³Ø¨ user_id
    const groupedResponses = {};
    const allLabelsSet = new Set();

    responses.forEach(resp => {
      if (!groupedResponses[resp.user_id]) {
        groupedResponses[resp.user_id] = {
          'User ID': resp.user_id,
          'Date Created': resp.created_at, // ÙŠÙ…ÙƒÙ†Ùƒ ØªØ­Ø¯ÙŠØ« Ù‡Ø°Ø§ Ø¥Ø°Ø§ ØªØ¨ÙŠÙ† Ø£Ø­Ø¯Ø« ØªØ§Ø±ÙŠØ® Ù…Ø«Ù„Ø§Ù‹
        };
      }

      groupedResponses[resp.user_id][resp.label] = resp.response_text;
      allLabelsSet.add(resp.label);
    });

    const allLabels = Array.from(allLabelsSet); // Ù„Ø¬Ø¹Ù„ Ø§Ù„ØªØ±ØªÙŠØ¨ Ø«Ø§Ø¨Øª
    const headers = ['User ID', ...allLabels, 'Date Created'];

    // ØªØ­Ø¶ÙŠØ± CSV
    res.setHeader('Content-Disposition', `attachment; filename=meeting_${meetingId}_responses.csv`);
    res.setHeader('Content-Type', 'text/csv');

    const csvStream = format({ headers });
    csvStream.pipe(res);

    Object.values(groupedResponses).forEach(userData => {
      // Ù†Ø­Ø±Øµ Ø¹Ù„Ù‰ ØªØ±ØªÙŠØ¨ Ø§Ù„Ø¨ÙŠØ§Ù†Ø§Øª Ø­Ø³Ø¨ headers
      const row = {};
      headers.forEach(header => {
        row[header] = userData[header] || '';
      });
      csvStream.write(row);
    });

    csvStream.end();
  } catch (error) {
    console.error("ðŸ”´ Export error:", error);
    res.status(500).json({ message: 'Error exporting responses to CSV' });
  }
};
